{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Naomi Kaduwela\n",
    "# Intro to Java & Pyhon: Homework #1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "EXERCISE 1: Procedural vs Functional Programming with Pure Python Code - no external libraries \n",
    "Given a randomly generated list of numbers and words, find the count of each element type.\n",
    "\n",
    "DIRECTIONS: Please run the below cell and output should appear \n",
    "            *Note: You might have to rerun it several times as output changes with each run\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loop Int Count: 50\n",
      "Loop String Count: 50\n",
      "List Comprehension Int Count: 50\n",
      "List Comprehension String Count:  50\n",
      "Loop Int Count: 533\n",
      "Loop String Count: 467\n",
      "List Comprehension Int Count: 533\n",
      "List Comprehension String Count:  467\n",
      "Loop Int Count: 5101\n",
      "Loop String Count: 4899\n",
      "List Comprehension Int Count: 5101\n",
      "List Comprehension String Count:  4899\n",
      "Loop Int Count: 50048\n",
      "Loop String Count: 49952\n",
      "List Comprehension Int Count: 50048\n",
      "List Comprehension String Count:  49952\n",
      "Differences: [0.00017769800251699053, 0.00022827499924460426, 0.0003871869957947638, 0.0025165869992633816]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "import string\n",
    "import timeit\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Ask user to define size of the list (randomListSize)\n",
    "#randomListSize = int(input(\"please enter the size of the random list: \"))\n",
    "\n",
    "#Generate Random List Function\n",
    "def randomList(randomListSize):\n",
    "    count = 0\n",
    "    l = []\n",
    "    while count < randomListSize:\n",
    "        diceRoll = random.randint(0, 1)\n",
    "        if diceRoll == 0:\n",
    "            randomInt = random.randint(0, 1000)\n",
    "            l.append(randomInt)\n",
    "        elif diceRoll == 1:\n",
    "            l.append(''.join([random.choice(string.ascii_letters + string.digits) for n in range(10)]))\n",
    "        count = count+1\n",
    "    return l\n",
    "\n",
    "#Count the number of words and numbers in the given list using LOOPS\n",
    "def countTypesInListWithLoops(list1):\n",
    "    loopIntCountList = []\n",
    "    \n",
    "    for i in range(len(list1)):\n",
    "        if type(list1[i]) == int:\n",
    "            loopIntCountList.append(1)\n",
    "    \n",
    "    loopIntCount = len(loopIntCountList)\n",
    "\n",
    "    #print(loopIntCountList)\n",
    "    print(\"Loop Int Count:\", loopIntCount)\n",
    "    print(\"Loop String Count:\", (len(list1) - loopIntCount))\n",
    "    #print(\"Loop Total:\" + len(list1))\n",
    "\n",
    "#Count the number of words and numbers in the given list using LIST COMPREHENSION\n",
    "def countTypesInListWithListComprehension(list1):\n",
    "    listIntCountList = []\n",
    "    \n",
    "    listIntCount = len([1 for i in range(len(list1)) if type(list1[i])==int])\n",
    "    #print(listIntCountList)\n",
    "    \n",
    "    #print(listIntCountList)\n",
    "    print(\"List Comprehension Int Count:\", listIntCount)\n",
    "    print(\"List Comprehension String Count: \", (len(list1) - listIntCount))\n",
    "    #print(\"List Comprehension Total\" + len(list1))\n",
    "    \n",
    "#Execute & Time functions\n",
    "\n",
    "# Array of trial values & arrays for each result set\n",
    "trials = [100, 1000, 10000, 100000]\n",
    "x = []\n",
    "differences = []\n",
    "\n",
    "# Call the functions for each trail number and store the result time values\n",
    "for i in trials:\n",
    "    list1 = randomList(i) \n",
    "    resultsLoop = (timeit.timeit(lambda n = list1: countTypesInListWithLoops(n), number = 1))\n",
    "    #print(resultsLoop)\n",
    "    resultsListComp = (timeit.timeit(lambda n = list1: countTypesInListWithListComprehension(n), number = 1))\n",
    "    #print(resultsListComp)\n",
    "    differences.append(resultsLoop - resultsListComp)\n",
    "    x.append(str(i))\n",
    "\n",
    "#print(x)\n",
    "#print(trials)\n",
    "print(\"Differences:\", differences)\n",
    "\n",
    "# Plot\n",
    "plt.bar(x, differences)\n",
    "plt.title(\"Difference in Function Run Time: Loop - List Comprehension\")\n",
    "plt.ylabel(\"Difference (in seconds)\")\n",
    "plt.xlabel(\"List Size\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "EXERCISE 2: Simple Student Grading System - memory based \n",
    "\n",
    "DIRECTIONS: \n",
    "    1. Run the below cell\n",
    "    2. A pop up with drop down values will appear - please select an option\n",
    "       *Note: Please ensure to select drop downs in order:\n",
    "        i.e. \"1. Load the Data\" first - before calling option #2, and #2 before calling #3, etc \n",
    "       *Note: output will appear in the cell below and not on the pop up, \n",
    "        so please check below cell for confirmation/feedback on errors after selecting value\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. Load Exam Data\n",
      "File has been successfully read! See example line:\n",
      " \n",
      "2. Print Report Card (student names, final scores, and letter grades sorted by names)\n",
      " \n",
      "Student Grade List: (Name, Final Score, Letter Grade)\n",
      "Abel 52 C\n",
      "Albina 32 C\n",
      "Alisha 68 C\n",
      "Alishia 66 C\n",
      "Allene 81 B\n",
      "Amber 79 C\n",
      "Ammie 66 C\n",
      "Arlene 66 C\n",
      "Arlette 68 C\n",
      "Art 92 A\n",
      "Bernardo 45 C\n",
      "Bette 61 C\n",
      "Blair 91 A\n",
      "Blondell 32 C\n",
      "Bobbye 58 C\n",
      "Brock 75 C\n",
      "Cammy 60 C\n",
      "Carma 62 C\n",
      "Carmelina 59 C\n",
      "Cecily 48 C\n",
      "Chanel 49 C\n",
      "Cory 84 B\n",
      "Danica 56 C\n",
      "Deeanna 82 B\n",
      "Delisa 77 C\n",
      "Delmy 85 B\n",
      "Devorah 83 B\n",
      "Dominque 54 C\n",
      "Donette 60 C\n",
      "Dyan 100 A\n",
      "Elly 52 C\n",
      "Elvera 84 B\n",
      "Elza 71 C\n",
      "Emerson 64 C\n",
      "Erick 59 C\n",
      "Ernie 69 C\n",
      "Ezekiel 61 C\n",
      "Fatima 98 A\n",
      "Fletcher 74 C\n",
      "Francine 86 B\n",
      "Gladys 71 C\n",
      "Graciela 74 C\n",
      "Ilene 65 C\n",
      "Jamal 73 C\n",
      "James 50 C\n",
      "Jina 86 B\n",
      "Johnetta 94 A\n",
      "Jose 66 C\n",
      "Josephine 83 B\n",
      "Kallie 69 C\n",
      "Kanisha 63 C\n",
      "Karl 84 B\n",
      "Kati 80 B\n",
      "Kiley 56 C\n",
      "Kris 64 C\n",
      "Lai 69 C\n",
      "Laurel 91 A\n",
      "Lavera 54 C\n",
      "Lenna 67 C\n",
      "Leota 68 C\n",
      "Lettie 72 C\n",
      "Lisha 63 C\n",
      "Lorrie 66 C\n",
      "Malinda 60 C\n",
      "Marjory 75 C\n",
      "Maryann 58 C\n",
      "Mattie 71 C\n",
      "Maurine 74 C\n",
      "Meaghan 75 C\n",
      "Micaela 72 C\n",
      "Minna 44 C\n",
      "Mitsue 39 C\n",
      "Moon 74 C\n",
      "Myra 48 C\n",
      "Natalie 90 A\n",
      "Penney 65 C\n",
      "Roxane 60 C\n",
      "Rozella 69 C\n",
      "Sabra 48 C\n",
      "Sage 64 C\n",
      "Shenika 70 C\n",
      "Simona 67 C\n",
      "Solange 67 C\n",
      "Stephaine 68 C\n",
      "Stephen 74 C\n",
      "Tamar 61 C\n",
      "Tammara 78 C\n",
      "Tawna 51 C\n",
      "Timothy 78 C\n",
      "Tonette 45 C\n",
      "Tyra 75 C\n",
      "Valentine 82 B\n",
      "Vallie 88 B\n",
      "Veronika 83 B\n",
      "Viva 92 A\n",
      "Wilda 80 B\n",
      "Willard 69 C\n",
      "Willow 93 A\n",
      "Youlanda 84 B\n",
      "Yuki 80 B\n",
      " \n",
      "3. Print score summary (Student Count, Min, Max, mean, mode, and standard deviation)\n",
      " \n",
      "Student Score Summary:\n",
      "Student Count:  100\n",
      "min:  32\n",
      "max:  100\n",
      "mean:  69.08\n",
      "mode:  66\n",
      "Standard Deviation: 14.24\n",
      " \n",
      "4. Identify values 2 SDs > mean\n",
      "Mean= 69.08 SD= 14.24\n",
      "Final Scores that are 2*SD > mean:\n",
      "100\n",
      "98\n",
      "5. Pie Chart of Final Letter Grade Distribution\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6. Box plot parameters: min, max, medial, Q1, Q3\n",
      "Min=  32\n",
      "Max=  100\n",
      "Median= 69.0\n",
      "Q1= 60.0\n",
      "Q3= 80.0\n",
      "7. Exit system\n",
      "Thank you! System is closed.\n"
     ]
    }
   ],
   "source": [
    "import csv, pprint\n",
    "import tkinter as ttk\n",
    "import matplotlib.pyplot as plt\n",
    "import statistics \n",
    "import collections\n",
    "#from collections import Counter\n",
    "from tkinter import *\n",
    "import numpy\n",
    " \n",
    "# Create Tkinter variable for the popup\n",
    "root = Tk()\n",
    "root.title(\"Student Grading System\")\n",
    " \n",
    "# Add a grid for the popup\n",
    "mainframe = Frame(root)\n",
    "mainframe.grid(column=0,row=0, sticky=(N,W,E,S) )\n",
    "mainframe.columnconfigure(0, weight = 1)\n",
    "mainframe.rowconfigure(0, weight = 1)\n",
    "mainframe.pack(pady = 100, padx = 100)\n",
    "\n",
    "# Make a popup drop down list of console options\n",
    "tkvar = StringVar(root)\n",
    "choices = [ 'Please select a value:','1. Load Exam Data','2. Print Report Card (student names, final scores, and letter grades sorted by names)','3. Print score summary (Student Count, Min, Max, mean, mode, and standard deviation)','4. Identify values 2 SDs > mean','5. Pie Chart of Final Letter Grade Distribution', '6. Box plot parameters: min, max, medial, Q1, Q3', '7. Exit system']\n",
    "tkvar.set('Please select a value:') # set the default option\n",
    "popupMenu = OptionMenu(mainframe, tkvar, *choices)\n",
    "Label(mainframe, text=\"Welcome to the Student Grading System! :) \\n Please select what you would like to do!\").grid(row = 1, column = 1)\n",
    "popupMenu.grid(row = 2, column =1)\n",
    "root.attributes(\"-topmost\", True)\n",
    "\n",
    "# Initiazlie variables for loading CSV data\n",
    "dict_list = []\n",
    "values = \"\"\n",
    "parsedValues = \"\"\n",
    "x = \"\" \n",
    "\n",
    "    \n",
    "# Make listener function for on change dropdown value\n",
    "def change_dropdown(*args):\n",
    "    \n",
    "    tempdict = {}\n",
    "    newlist = []\n",
    "    studentCount = 0\n",
    "    minScore = 10000\n",
    "    maxScore = 0\n",
    "    meanValues = 0\n",
    "    mean = 0\n",
    "    modeList = []\n",
    "    mode = 0\n",
    "    SD = 0\n",
    "    \n",
    "    medianValues = []\n",
    "\n",
    "    print( tkvar.get() )\n",
    "    \n",
    "    if(str(tkvar.get()).startswith('1.')):\n",
    "           \n",
    "        #1. Load Exam Data - Read in file to create list of dictionaries \n",
    "\n",
    "        reader = csv.reader(open('exams.csv'))\n",
    "        for line in reader:\n",
    "            parsedValues = {\"ID:\" : line[0], \"Name:\" : line[1], \"Quizzes:\" : line[2], \"Projects:\" : line[3], \"Exams:\" : line[4] }\n",
    "            #print(parsedValues)\n",
    "            dict_list.append(parsedValues)\n",
    "        dict_list.pop(0)      \n",
    "        #pprint.pprint(dict_list)\n",
    "        print(\"File has been successfully read! See example line:\")\n",
    "        print(\" \")\n",
    "        #print(parsedValues)\n",
    "            \n",
    "    elif(str(tkvar.get()).startswith('2.')):\n",
    "        \n",
    "        #2. Print List: student names, final scores, and letter grades - sorted by names\n",
    "        \n",
    "        for i in range(len(dict_list)):\n",
    "            # Create new column in dict_list for new calculated fields: final score & letter grade \n",
    "            finalScore = 0\n",
    "            letterGrade = \"\"\n",
    "            finalScore = (.4*float(dict_list[i][\"Exams:\"]) + .3*float(dict_list[i][\"Projects:\"])+ .3*float(dict_list[i][\"Quizzes:\"]))\n",
    "            #print(finalScore)\n",
    "            \n",
    "            if (finalScore > 89):\n",
    "                letterGrade = \"A\"\n",
    "            elif (finalScore > 79 and finalScore <90):\n",
    "                letterGrade = \"B\"\n",
    "            elif (finalScore > 19 and finalScore <80):\n",
    "                letterGrade = \"C\" \n",
    "            elif (finalScore > 9 and finalScore <20):\n",
    "                letterGrade = \"D\"\n",
    "            elif (finalScore <10):\n",
    "                letterGrade = \"F\"      \n",
    "                \n",
    "            dict_list[i].update({'Final Score:': int(round(finalScore)), 'Letter Grade:': letterGrade})\n",
    "        \n",
    "        #print(dict_list)    \n",
    "        \n",
    "        #Store  vlaues into another list to sort and print output ordered by student name\n",
    "        \n",
    "        print(\" \")\n",
    "        print(\"Student Grade List: (Name, Final Score, Letter Grade)\")\n",
    "        for i in range(len(dict_list)):\n",
    "            newlist = sorted(dict_list, key=lambda k: k['Name:']) \n",
    "            print(str(newlist[i][\"Name:\"]) + \" \" + str(newlist[i][\"Final Score:\"]) + \" \" +str(newlist[i][\"Letter Grade:\"]))\n",
    "        print(\" \")\n",
    "        \n",
    "    elif(str(tkvar.get()).startswith('3.')):\n",
    "        \n",
    "        #3. Print score summary (Student Count, Min, Max, mean, mode, and standard deviation)\n",
    "\n",
    "        studentCount = 0\n",
    "        minScore = 10000\n",
    "        maxScore = 0\n",
    "        meanValues = 0\n",
    "        mean = 0\n",
    "        modeList = []\n",
    "        mode = 0\n",
    "        SD = 0\n",
    "  \n",
    "        # Calculate Min, Max, Mode   \n",
    "        for i in range(len(dict_list)):\n",
    "            studentCount = studentCount + 1\n",
    "            \n",
    "            #calculate min\n",
    "            if(dict_list[i][\"Final Score:\"] < minScore):\n",
    "                minScore = dict_list[i][\"Final Score:\"]\n",
    "                \n",
    "            #calculate max\n",
    "            if(dict_list[i][\"Final Score:\"] > maxScore):\n",
    "                maxScore = dict_list[i][\"Final Score:\"]\n",
    "            \n",
    "            #Calculate mean\n",
    "            meanValues = meanValues + dict_list[i][\"Final Score:\"]\n",
    "       \n",
    "        mean= meanValues/len(dict_list)\n",
    "        \n",
    "        #Calculate mode\n",
    "    \n",
    "        for i in range(len(dict_list)):\n",
    "            modeList.append(dict_list[i][\"Final Score:\"])\n",
    "        #print(modeList)  \n",
    "        mode = max(set(modeList), key=modeList.count)\n",
    "        \n",
    "        #Calculate SD\n",
    "        SD = round(statistics.stdev(modeList),2)\n",
    "        \n",
    "        print(\" \")\n",
    "        print(\"Student Score Summary:\")\n",
    "        print(\"Student Count: \", studentCount)\n",
    "        print(\"min: \", minScore)\n",
    "        print(\"max: \", maxScore)\n",
    "        print(\"mean: \", mean)\n",
    "        print(\"mode: \", mode)\n",
    "        print(\"Standard Deviation:\", SD)\n",
    "        print(\" \")\n",
    "\n",
    "    elif(str(tkvar.get()).startswith('4.')):\n",
    "        \n",
    "        #4. Identify values 2 SDs > mean\n",
    "        \n",
    "        #Mean\n",
    "        for i in range(len(dict_list)):\n",
    "            meanValues = meanValues + dict_list[i][\"Final Score:\"]\n",
    "        mean= meanValues/len(dict_list)\n",
    "        \n",
    "        #Use mode list which has list of final scores from previous elif\n",
    "        for i in range(len(dict_list)):\n",
    "            modeList.append(dict_list[i][\"Final Score:\"])\n",
    "        \n",
    "        #Calculate SD*2 > mean\n",
    "        SD = round(statistics.stdev(modeList),2)\n",
    "        print(\"Mean=\", mean, \"SD=\", SD)\n",
    "        print(\"Final Scores that are 2*SD > mean:\")\n",
    "        for i in range(len(dict_list)):\n",
    "            if(dict_list[i][\"Final Score:\"] > mean+SD*2):\n",
    "                print(dict_list[i][\"Final Score:\"])\n",
    "    \n",
    "    elif(str(tkvar.get()).startswith('5.')):\n",
    "        #5. Pie Chart of Final Letter Grade Distribution\n",
    "\n",
    "        grade_pie = []\n",
    "        for i in range(len(dict_list)):\n",
    "            grade_pie.append(dict_list[i][\"Letter Grade:\"])\n",
    "        #print(grade_pie)\n",
    "        \n",
    "        #Plot Pie\n",
    "        pie_input =collections.Counter(grade_pie) \n",
    "        #print(pie_input)\n",
    "        plt.pie(pie_input.values(),labels = pie_input.keys(),autopct='%1.1f%%', colors = ['lightcoral','lightskyblue','yellowgreen'],shadow=True, startangle=140)\n",
    "        plt.show()\n",
    "        \n",
    "   \n",
    "    elif(str(tkvar.get()).startswith('6.')):\n",
    "        #6. Box plot parameters: min, max, medial, Q1, Q3\n",
    "        \n",
    "        \n",
    "        #Min & Max\n",
    "        maxVals = []\n",
    "        maxVal = 100\n",
    "        minVals = []\n",
    "        minVal = 100\n",
    "        maxval = 0\n",
    "        medianVals = []\n",
    "        \n",
    "        for i in range(len(dict_list)):\n",
    "            minVals.append(dict_list[i][\"Final Score:\"])\n",
    "            maxVals.append(dict_list[i][\"Final Score:\"])\n",
    "        \n",
    "        #print(minVals)\n",
    "        for i in range(len(minVals)):\n",
    "            if(minVal > minVals[i]):\n",
    "                minVal = minVals[i]\n",
    "        print(\"Min= \",minVal)\n",
    "        \n",
    "        #print(maxVals)\n",
    "        for i in range(len(maxVals)):\n",
    "            if(maxVal < maxVals[i]):\n",
    "                maxVal = maxVals[i]\n",
    "        print(\"Max= \", maxVal)\n",
    "        \n",
    "        #median, Q1, Q3\n",
    "        \n",
    "        for i in range(len(dict_list)):\n",
    "            medianValues.append(dict_list[i][\"Final Score:\"])\n",
    "\n",
    "        print(\"Median=\",statistics.median(medianValues))\n",
    "        print(\"Q1=\",numpy.percentile(medianValues,25))\n",
    "        print(\"Q3=\", numpy.percentile(medianValues,75))\n",
    "        \n",
    "    elif(str(tkvar.get()).startswith('7.')):\n",
    "        #7. Exit system\n",
    "       \n",
    "        root.destroy()\n",
    "        exit()\n",
    "        print(\"Thank you! System is closed.\")\n",
    "    \n",
    "    else:\n",
    "        print(\"Please select a valid value\")\n",
    "    \n",
    "\n",
    "# link function to change dropdown\n",
    "tkvar.trace('w', change_dropdown)\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Exercise 3: Pick an extension library from PyPI or other sources (something of interest to you). \n",
    "    Summarize the functionality provided by the library (one paragraph) and show a usage example.\n",
    "\n",
    "   Numpy is a great library for scientific computing in Python, as it can handle multi dimension arrays. \n",
    "As we focus on data science and often need to work with many predictors, this would be helpful to scale our solutions.\n",
    "Numpy also provides a much more efficient and easy way to get descriptive statistics including: mean, medican, and quantiles.\n",
    "\n",
    "   Numpy is foundational and integrates well with many other packages. For example, \n",
    "SciPy builds on Numpy and has many engineering models, with linear algebra functions that are required for data science\n",
    "algorithms. Matplotlib also builds on Numpy, and has cool, flexible plotting features! This is increasingly important\n",
    "as user expierence becomes a focus: we need to ensure that we communicate our data in a way that's easy to digest!\n",
    "\n",
    "   There is another cool libary: Nipy, which does Analysis of structural and functional neuroimaging data.\n",
    "This would be helpful to use when writing data science algorithms to scan MRI images for patient diagnostics - which I \n",
    "would love to do! :)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a25e64d30>,\n",
       " <matplotlib.lines.Line2D at 0x1a25e64e80>]"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import special, optimize\n",
    "\n",
    "#See matplotlib plotting functionality leveraging numpy\n",
    "\n",
    "f = lambda x: -special.jv(3, x)\n",
    "sol = optimize.minimize(f, 1.0)\n",
    "x = np.linspace(0, 10, 5000)\n",
    "plt.plot(x, special.jv(3, x), '-', sol.x, -sol.fun, 'o')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean:  5.0\n",
      "Median:  3.0\n",
      "Q1:  1.5\n",
      "Q3:  5.0\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy import stats\n",
    "\n",
    "#See how numpy can much more easily calculate frequrently desired descriptive statistics \n",
    "\n",
    "dataset= [1,1,2,3,4,6,18]\n",
    "\n",
    "#mean value\n",
    "mean= np.mean(dataset)\n",
    "\n",
    "#median value\n",
    "median = np.median(dataset)\n",
    "\n",
    "#Q1 value\n",
    "q1 = np.percentile(dataset, 25)\n",
    "\n",
    "#Q3 value\n",
    "q3 = np.percentile(dataset, 75)\n",
    "\n",
    "print(\"Mean: \", mean)\n",
    "print(\"Median: \", median)\n",
    "print(\"Q1: \", q1)\n",
    "print(\"Q3: \", q3)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
